<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xmlns:test="http://apache.org/hello_world_soap_http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:sec="http://cxf.apache.org/configuration/security"
	xsi:schemaLocation="
        http://cxf.apache.org/core
        http://cxf.apache.org/schemas/core.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
        http://cxf.apache.org/jaxws                                     
        http://cxf.apache.org/schemas/jaxws.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-2.0.xsd
        http://cxf.apache.org/transports/http/configuration
        http://cxf.apache.org/schemas/configuration/http-conf.xsd
        http://cxf.apache.org/configuration/security
        http://cxf.apache.org/schemas/configuration/security.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<import resource="passwords.xml" />

	<cxf:bus>
		<cxf:features>
			<cxf:logging />
		</cxf:features>
	</cxf:bus>

	<bean id="transportSTSProviderBean"
		class="org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider">
		<property name="issueOperation" ref="transportIssueDelegate" />
		<property name="validateOperation" ref="transportValidateDelegate" />
	</bean>

	<bean id="transportIssueDelegate" class="org.apache.cxf.sts.operation.TokenIssueOperation">
		<property name="tokenProviders" ref="transportTokenProviders" />
		<property name="services" ref="transportService" />
		<property name="stsProperties" ref="transportSTSProperties" />
		<property name="claimsManager" ref="claimsManager" />
		<property name="tokenValidators" ref="transportTokenValidators" />
	</bean>

	<bean id="transportValidateDelegate" class="org.apache.cxf.sts.operation.TokenValidateOperation">
		<property name="tokenValidators" ref="transportTokenValidators" />
		<property name="stsProperties" ref="transportSTSProperties" />
		<!--<property name="tokenProviders" ref="transportTokenProvidersForValidation" />-->
	</bean>
<!-- 
	<util:list id="transportTokenProvidersForValidation">
		<bean class="org.apache.cxf.sts.token.provider.SAMLTokenProvider">
			<property name="signToken" value="false" />
			<property name="realmMap" ref="realms"/>
		</bean>
	</util:list>
 -->
    
    <util:list id="relationships">
		<bean class="org.apache.cxf.sts.token.realm.Relationship">
			<property name="sourceRealm" value="REALMA" />
			<property name="targetRealm" value="REALMAB"/>
			<property name="identityMapper" ref="identityMapper" />
			<property name="type" value="FederatedIdentity" />
		</bean>
		<bean class="org.apache.cxf.sts.token.realm.Relationship">
			<property name="sourceRealm" value="REALMB" />
			<property name="targetRealm" value="REALMA"/>
			<property name="identityMapper" ref="identityMapper" />
			<property name="type" value="FederatedIdentity" />
		</bean>		
	</util:list>
 
 
	<util:list id="transportTokenProviders">
		<ref bean="transportSamlTokenProvider" />
		<ref bean="transportIONABSTTokenProviderA" />
		<ref bean="transportIONABSTTokenProviderB" />
	</util:list>

	<util:list id="transportTokenValidators">
		<ref bean="transportSamlTokenValidator" />
		<!-- <ref bean="transportX509TokenValidator"/> <ref bean="transportUsernameTokenValidator"/> -->
	</util:list>

	<bean id="transportIONABSTTokenProviderA" class="demo.sts.IONABSTTokenProvider">
		<property name="realm" value="REALMA" />
	</bean>
	
	<bean id="transportIONABSTTokenProviderB" class="demo.sts.IONABSTTokenProvider">
		<property name="realm" value="REALMB" />
	</bean>
	
	<bean id="realmA"
        class="org.apache.cxf.sts.token.realm.SAMLRealm">
        <property name="issuer" value="STS Realm A"/>
        <property name="signaturePropertiesFile" value="stsKeystoreA.properties" />
        <property name="callbackHandlerClass" value="demo.sts.PasswordCallbackHandler" />
    </bean>
    
    <bean id="realmB"
        class="org.apache.cxf.sts.token.realm.SAMLRealm">
        <property name="issuer" value="STS Realm B"/>
        <property name="signaturePropertiesFile" value="stsKeystoreB.properties" />
        <property name="callbackHandlerClass" value="demo.sts.PasswordCallbackHandler" />
    </bean>
    
    <util:map id="realms">
        <entry key="REALMA" value-ref="realmA"/>
        <entry key="REALMB" value-ref="realmB"/>
    </util:map>

	<util:list id="trustedClients">
		<value>.*CN=www.client.com.*OU=IT Department.*</value>
	</util:list>

	<!-- Start: SAML token provider which issues claims -->
	<bean id="transportSamlTokenProvider" class="org.apache.cxf.sts.token.provider.SAMLTokenProvider">
		<property name="attributeStatementProviders" ref="attributeStatementProvidersList" />
		<property name="realmMap" ref="realms" />
		<property name="conditionsProvider" ref="conditionsProvider" />
	</bean>
	
	<bean id="conditionsProvider"
		class="org.apache.cxf.sts.token.provider.DefaultConditionsProvider">
		<property name="lifetime" value="3600" />
	</bean>

	<util:list id="attributeStatementProvidersList">
		<ref bean="claimAttributeProvider" />
	</util:list>

	<bean id="claimAttributeProvider"
		class="org.apache.cxf.sts.claims.ClaimsAttributeStatementProvider">
	</bean>

	<bean id="claimsManager" class="org.apache.cxf.sts.claims.ClaimsManager">
		<property name="claimHandlers" ref="claimHandlerList" />
	</bean>

	<util:list id="claimHandlerList">
		<!--<ref bean="ldapClaimsHandler" />-->
	</util:list>

    <!--
	<bean id="contextSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="url" value="ldap://${ldap-host-port}" />
		<property name="userDn"
			value="${ldap-tech-user}" />
		<property name="password" value="${ldap-test-user-pw}" />
	</bean>

	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<constructor-arg ref="contextSource" />
	</bean>

	<util:map id="claimsToLdapAttributeMapping">
		<entry
			key="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
			value="givenName" />
		<entry key="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
			value="sn" />
		<entry
			key="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"
			value="mail" />
		<entry key="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country"
			value="c" />
	</util:map>

	<bean id="ldapClaimsHandler" class="org.apache.cxf.sts.claims.LdapClaimsHandler">
		<property name="ldapTemplate" ref="ldapTemplate" />
		<property name="claimsLdapAttributeMapping" ref="claimsToLdapAttributeMapping" />
		<property name="userBaseDN" value="${baseDN}" />
	</bean>
	-->
	
	<bean id="identityMapper" class="demo.sts.DemoIdentityMapper" />
	
    <bean id="upCallBackHandlerRealmA"
		class="demo.sts.UsernamePasswordCallbackHandler">
		<property name="passwords" ref="passwords" />
	</bean>

    <bean id="upCallBackHandlerRealmB"
		class="demo.sts.UsernamePasswordCallbackHandler">
		<property name="passwords" ref="PASSWORDS" />
	</bean>
	
	<!-- End: SAML token provider which issues claims -->

	<bean id="transportSamlTokenValidator" class="org.apache.cxf.sts.token.validator.SAMLTokenValidator">
	    <property name="samlRealmCodec" ref="samlRealmCodec" />
	</bean>
	
	<bean id="samlRealmCodec" class="demo.sts.DemoSamlRealmCodec" />

	<bean id="transportX509TokenValidator" class="org.apache.cxf.sts.token.validator.X509TokenValidator">
	</bean>

	<bean id="transportUsernameTokenValidator"
		class="org.apache.cxf.sts.token.validator.UsernameTokenValidator">
	</bean>

	<bean id="transportService" class="org.apache.cxf.sts.service.StaticService">
		<property name="endpoints" ref="transportEndpoints" />
	</bean>

	<util:list id="transportEndpoints">
		<value>https://localhost:(8081|8083)/doubleit/services/doubleittransport.*</value>
		<value>.*</value>
	</util:list>

	<bean id="customRealmParser" class="demo.sts.UriRealmParser"/>
	
	<bean id="kerberosValidator" class="org.apache.ws.security.validate.KerberosTokenValidator">
		<property name="contextName" value="STS" />
		<property name="serviceName" value="HTTP@localhost:443" />
	</bean>

    <!--
	<bean id="jaasUTValidator" class="org.apache.ws.security.validate.JAASUsernameTokenValidator">
		<property name="contextName" value="${ldap-jaas-ctx}" />
	</bean>
	-->

	<bean id="transportSTSProperties" class="org.apache.cxf.sts.StaticSTSProperties">
		<property name="callbackHandlerClass"
			value="demo.sts.PasswordCallbackHandler" />
		<property name="issuer" value="CXF STS" />
		<property name="realmParser" ref="customRealmParser"/>
		<property name="signaturePropertiesFile" value="stsTruststore.properties" />
		<property name="relationships" ref="relationships" />
	</bean>
	
	
	<jaxws:endpoint id="transportSTSRealmA" implementor="#transportSTSProviderBean"
		address="/REALMA/STSServiceTransport" wsdlLocation="/WEB-INF/wsdl/ws-trust-1.4-service.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:Transport_Port">
		<jaxws:properties>
		</jaxws:properties>
	</jaxws:endpoint>

	<jaxws:endpoint id="transportSTSRealmB" implementor="#transportSTSProviderBean"
		address="/REALMB/STSServiceTransport" wsdlLocation="/WEB-INF/wsdl/ws-trust-1.4-service.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:Transport_Port">
		<jaxws:properties>
		</jaxws:properties>
	</jaxws:endpoint>

	<jaxws:endpoint id="transportSTSRealmAUT" implementor="#transportSTSProviderBean"
		address="/REALMA/STSServiceTransportUT" wsdlLocation="/WEB-INF/wsdl/ws-trust-1.4-service.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:TransportUT_Port">
		<jaxws:properties>
			<entry key="ws-security.callback-handler" value-ref="upCallBackHandlerRealmA" />
			<!-- <entry key="ws-security.ut.validator" value-ref="jaasUTValidator" />-->
		</jaxws:properties>
	</jaxws:endpoint>

	<jaxws:endpoint id="transportSTSRealmBUT" implementor="#transportSTSProviderBean"
		address="/REALMB/STSServiceTransportUT" wsdlLocation="/WEB-INF/wsdl/ws-trust-1.4-service.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:TransportUT_Port">
		<jaxws:properties>
			<entry key="ws-security.callback-handler" value-ref="upCallBackHandlerRealmB" />
			<!-- <entry key="ws-security.ut.validator" value-ref="jaasUTValidator" />-->
		</jaxws:properties>
	</jaxws:endpoint>

	<jaxws:endpoint id="transportSTSRealmAKT" implementor="#transportSTSProviderBean"
		address="/REALMA/STSServiceTransportKerberos" wsdlLocation="/WEB-INF/wsdl/ws-trust-1.4-service.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:TransportKerberos_Port">
		<jaxws:properties>
			<entry key="ws-security.callback-handler" value="com.zurich.zsoa.sts.cxf.PasswordCallbackHandler" />
			<entry key="ws-security.bst.validator" value-ref="kerberosValidator" />
		</jaxws:properties>
	</jaxws:endpoint>

	<jaxws:endpoint id="transportSTSRealmBKT" implementor="#transportSTSProviderBean"
		address="/REALMB/STSServiceTransportKerberos" wsdlLocation="/WEB-INF/wsdl/ws-trust-1.4-service.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:TransportKerberos_Port">
		<jaxws:properties>
			<entry key="ws-security.callback-handler" value="com.zurich.zsoa.sts.cxf.PasswordCallbackHandler" />
			<entry key="ws-security.bst.validator" value-ref="kerberosValidator" />
		</jaxws:properties>
	</jaxws:endpoint>


 
</beans>

